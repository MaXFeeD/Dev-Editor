var __mod__ = new com.zhekasmirnov.innercore.mod.build.Mod();
var __name__ = "Dump Creator";
var __dir__ = "/storage/emulated/0/Android/data/io.spck/files/Dev-Editor/support/Dump Creator/";
var __config__ = new com.zhekasmirnov.innercore.mod.build.Config();
function __debug_typecheck__() {}
function runCustomSource() {}
var BlockID = {};
var ItemID = {};
var VanillaItemID = {};
var VanillaBlockID = {};
var VanillaTileID = {};

function importLib() {}
function IMPORT() {}
function IMPORT_NATIVE() {}
function WRAP_NATIVE() {}
function WRAP_JAVA() {}
var __packdir__ = "/storage/emulated/0/games/horizon/packs/Inner_Core/";
function getCoreAPILevel() {return 10;}
function runOnMainThread(func) {}
function getMCPEVersion() {return {"str":"1.11.4","array":[1,11,4],"main":28};}
var Debug = {};
Debug.sysTime = function() {return 1601121530090;};
Debug.addParticle = function(id, x, y, z, vx, vy, vz, data) {};
Debug.message = function(message) {};
Debug.warning = function(message) {};
Debug.error = function(message) {};
Debug.m = function() {};
Debug.bitmap = function(bitmap, title) {};
Debug.big = function() {};

var NBT = {};
var TagRegistry = {};
var Resources = {};
Resources.addRuntimePack = function(type, name) {};

var Dimensions = {};
Dimensions._parsers = {};
Dimensions._parsers.error = function(error, descr) {};
Dimensions._parsers.getFloat = function(value, default_value) {};
Dimensions._parsers.getVec3 = function(value, default_value) {};
Dimensions._parsers.getMaterialBlockData = function(value, default_value) {};
Dimensions._parsers.parseTerrainMaterial = function(material, descr) {};
Dimensions._parsers.newConversion = function() {};
Dimensions._parsers.newNoiseOctave = function(descr) {};
Dimensions._parsers.newNoiseLayer = function(descr) {};
Dimensions._parsers.newNoiseGenerator = function(descr) {};
Dimensions._parsers.newTerrainLayer = function(descr, factory) {};
Dimensions._parsers.newTerrainLayerSet = function(descr, factory) {};
Dimensions._parsers.newMonoBiomeTerrainGenerator = function(descr) {};
Dimensions._parsers.newGenerator = function(descr) {};
Dimensions.newGenerator = function(description) {};

function CustomBiome() {}
var Commands = {};
var FileTools = {};
FileTools.mntdir = "/mnt";
FileTools.root = "/storage/emulated/0/";
FileTools.moddir = "/storage/emulated/0/games/horizon/packs/Inner_Core/innercore/mods/";
FileTools.mkdir = function(dir) {};
FileTools.mkworkdirs = function() {};
FileTools.getFullPath = function(path) {return "/storage/emulated/0/test";};
FileTools.isExists = function(path) {};
FileTools.WriteText = function(file, text, add) {};
FileTools.ReadText = function(file) {return "some text
";};
FileTools.WriteImage = function(file, bitmap) {};
FileTools.ReadImage = function(file) {return null;};
FileTools.ReadTextAsset = function(name) {};
FileTools.ReadImageAsset = function(name) {};
FileTools.ReadBytesAsset = function(name) {};
FileTools.GetListOfDirs = function(path) {return [];};
FileTools.GetListOfFiles = function(path, ext) {return [];};
FileTools.ReadKeyValueFile = function(dir, specialSeparator) {return {"{\"key\"":"\"value\"}"};};
FileTools.WriteKeyValueFile = function(dir, data, specialSeparator) {};
FileTools.ReadJSON = function(dir) {return {};};
FileTools.WriteJSON = function(dir, obj, beautify) {};

var Logger = {};
var Translation = {};
var Threading = {};
Threading.threads = [];
Threading.formatFatalErrorMessage = function(error, name, priority, formatFunc) {};
Threading.initThread = function() {};
Threading.getThread = function(name) {};

function Config() {}
var UI = {};
var UpdatableAPI = {};
var Updatable = {};
var TileEntity = {};
TileEntity.tileEntityPrototypes = {};
TileEntity.tileEntityList = [];
TileEntity.resetEngine = function() {};
TileEntity.registerPrototype = function(blockID, customPrototype) {};
TileEntity.getPrototype = function(blockID) {return {"remove":false,"isLoaded":false,"__initialized":false,"defaultValues":{},"blockID":1,"saverId":1390014972};};
TileEntity.isTileEntityBlock = function(blockID) {return true;};
TileEntity.createTileEntityForPrototype = function(Prototype, addToUpdate) {};
TileEntity.addTileEntity = function(x, y, z) {return null;};
TileEntity.addUpdatableAsTileEntity = function(updatable) {};
TileEntity.getTileEntity = function(x, y, z) {return null;};
TileEntity.destroyTileEntity = function(tileEntity) {};
TileEntity.destroyTileEntityAtCoords = function(x, y, z) {};
TileEntity.isTileEntityLoaded = function(tileEntity) {};
TileEntity.checkTileEntityForIndex = function(index) {};
TileEntity.tileEntityCheckIndex = 0;
TileEntity.CheckTileEntities = function() {};
TileEntity.DeployDestroyChecker = function(tileEntity) {};

var MobRegistry = {};
MobRegistry.customEntities = {};
MobRegistry.customEntities.test = new Object();;
MobRegistry.loadedEntities = [];
MobRegistry.registerEntity = function(name) {return {"nameId":"test","controllers":{"event":{"parent":null,"__controller_name":"event"},"description":{"isDynamic":false,"parent":null,"__controller_name":"description"},"visual":{"modelWatchers":{},"modelWatcherStack":{},"parent":null,"__controller_name":"visual"},"AI":{"currentPriority":0,"loadedAI":{},"loadedData":{},"isAILoaded":false,"parent":null,"__controller_name":"AI"}},"isInstance":false,"entity":null,"age":0,"unloadedTime":0,"realPosition":null,"__base_type":28,"saverId":3556499,"lockRemovalHook":false,"event":{"parent":null,"__controller_name":"event"},"description":{"isDynamic":false,"parent":null,"__controller_name":"description"},"visual":{"modelWatchers":{},"modelWatcherStack":{},"parent":null,"__controller_name":"visual"},"AI":{"currentPriority":0,"loadedAI":{},"loadedData":{},"isAILoaded":false,"parent":null,"__controller_name":"AI"}};};
MobRegistry.registerUpdatableAsEntity = function(updatable) {};
MobRegistry.spawnEntityAsPrototype = function(typeName, coords, extraData) {};
MobRegistry.getEntityUpdatable = function(entity) {};
MobRegistry.registerNativeEntity = function(entity) {};
MobRegistry.registerEntityRemove = function(entity) {};
MobRegistry.resetEngine = function() {};

var MobSpawnRegistry = {};
MobSpawnRegistry.spawnData = [];
MobSpawnRegistry.registerSpawn = function(entityType, rarity, condition, denyNaturalDespawn) {};
MobSpawnRegistry.getRandomSpawn = function(rarityMultiplier) {};
MobSpawnRegistry.getRandPosition = function() {return {"x":-35.403196838987384,"z":35.75802305162795};};
MobSpawnRegistry.executeSpawn = function(spawn, position) {};
MobSpawnRegistry.counter = 0;
MobSpawnRegistry.tick = function() {};
MobSpawnRegistry.onChunkGenerated = function(x, z) {};

var Callback = {};

function GameObject(name, Prototype) {}
var GameObjectRegistry = {};
GameObjectRegistry.gameObjectTypes = {};
GameObjectRegistry.gameObjectTypes.test = this;
GameObjectRegistry.activeGameObjects = {};
GameObjectRegistry.genUniqueName = function(name) {return "_test";};
GameObjectRegistry.registerClass = function(gameObjectClass) {};
GameObjectRegistry.deployGameObject = function(gameobject) {};
GameObjectRegistry.addGameObject = function(gameobject) {};
GameObjectRegistry.removeGameObject = function(gameobject) {};
GameObjectRegistry.resetEngine = function() {};
GameObjectRegistry.getAllByType = function(type, clone) {return [];};
GameObjectRegistry.callForType = function() {};
GameObjectRegistry.callForTypeSafe = function() {};

var ModAPI = {};
ModAPI.modAPIs = {};
ModAPI.modAPIs.DevEditor = {};
ModAPI.modAPIs.DevEditor.api = {};
ModAPI.modAPIs.DevEditor.api.createAndLock = function() {};
ModAPI.modAPIs.DevEditor.api.getCurrentEnvironment = function() {return "Dev-Editor";};
ModAPI.modAPIs.DevEditor.api.isLocked = function() {return true;};
ModAPI.modAPIs.DevEditor.descr = {};
ModAPI.modAPIs.DevEditor.descr.name = "DevEditor";
ModAPI.modAPIs.DevEditor.descr.props = {};
ModAPI.modAPIs.WorldEdit = {};
ModAPI.modAPIs.WorldEdit.api = {};
ModAPI.modAPIs.WorldEdit.api.addCommand = function(name, desc, event, args, selectedArea) {};
ModAPI.modAPIs.WorldEdit.api.getCommand = function(name) {};
ModAPI.modAPIs.WorldEdit.api.getPosition = function() {return {"pos1":{"x":null,"y":null,"z":null},"pos2":{"x":null,"y":null,"z":null}};};
ModAPI.modAPIs.WorldEdit.api.getValidPosition = function() {};
ModAPI.modAPIs.WorldEdit.api.getSizeArea = function() {return 1;};
ModAPI.modAPIs.WorldEdit.api.selectPosition = function(p1, p2) {};
ModAPI.modAPIs.WorldEdit.descr = {};
ModAPI.modAPIs.WorldEdit.descr.name = "WorldEdit";
ModAPI.modAPIs.WorldEdit.descr.props = {};
ModAPI.registerAPI = function(name, api, descr) {};
ModAPI.requireAPI = function(name) {return null;};
ModAPI.requireGlobal = function(name) {return null;};
ModAPI.requireAPIdoc = function(name) {return {"name":"test","props":{}};};
ModAPI.requireAPIPropertyDoc = function(name, prop) {return null;};
ModAPI.getModByName = function(modName) {return null;};
ModAPI.isModLoaded = function(modName) {};
ModAPI.addAPICallback = function(apiName, func) {};
ModAPI.addModCallback = function(modName, func) {};
ModAPI.getModList = function() {return [];};
ModAPI.getModPEList = function() {return [];};
ModAPI.addTexturePack = function(path) {};
ModAPI.cloneAPI = function(api, deep) {return {};};
ModAPI.inheritPrototypes = function(source, target) {};
ModAPI.cloneObject = function(source, deep, rec) {};
ModAPI.debugCloneObject = function(source, deep, rec) {};

var Saver = {};
Saver.addSavesScope = function(name, loadFunc, saveFunc) {};
Saver.registerScopeSaver = function(name, saver) {};
Saver.registerObjectSaver = function(name, saver) {};
Saver.registerObject = function(obj, saverId) {};
Saver.setObjectIgnored = function(obj, ignore) {};

var World = {};
World.isLoaded = false;
World.setLoaded = function(isLoaded) {};
World.isWorldLoaded = function() {};
World.getThreadTime = function() {};
World.getRelativeCoords = function(x, y, z, side) {};
World.getVectorByBlockSide = function(side) {};
World.getInverseBlockSide = function(side) {return 1;};
World.canTileBeReplaced = function(id, data) {};
World.doesVanillaTileHasUI = function(id) {};
World.setBlockUpdateType = function() {};
World.setBlockUpdateAllowed = function() {};
World.setBlockChangeCallbackEnabled = function(id, enabled) {};
World.blockChangeCallbacks = [];
World.registerBlockChangeCallback = function(ids, callback) {};
World.onBlockChanged = function(coords, block1, block2, int1, int2) {};
World.addGenerationCallback = function(targetCallback, callback, uniqueHashStr) {};
World.__inworld = {};
World.__inmenu = {};
World.nativeSetBlock = function() {};
World.nativeGetBlockID = function() {};
World.nativeGetBlockData = function(x, y, z) {};
World.setBlock = function(x, y, z, id, data) {};
World.setFullBlock = function(x, y, z, fullTile) {};
World.getBlock = function(x, y, z) {return {"id":0,"data":0};};
World.getBlockID = function(x, y, z) {};
World.getBlockData = function(x, y, z) {};
World.destroyBlock = function(x, y, z, drop) {};
World.getLightLevel = function(x, y, z) {};
World.isChunkLoaded = function(x, z) {};
World.isChunkLoadedAt = function(x, y, z) {};
World.getTileEntity = function(x, y, z) {return null;};
World.addTileEntity = function(x, y, z) {return null;};
World.removeTileEntity = function(x, y, z) {};
World.getContainer = function(x, y, z) {return null;};
World.getWorldTime = function() {};
World.setWorldTime = function(time) {};
World.setDayMode = function(day) {};
World.setNightMode = function(night) {};
World.getWeather = function() {return {"rain":0,"thunder":0};};
World.setWeather = function(weather) {};
World.drop = function(x, y, z, id, count, data, extra) {return null;};
World.explode = function(x, y, z, power, someBoolean) {};
World.getBiome = function(x, z) {return -1;};
World.getBiomeName = function(x, z) {return "error: level not loaded";};
World.getGrassColor = function(x, z) {};
World.setGrassColor = function(x, z, color) {};
World.getGrassColorRGB = function(x, z) {return {"r":0,"g":0,"b":0};};
World.setGrassColorRGB = function(x, z, rgb) {};
World.canSeeSky = function(x, y, z) {};
World.playSound = function(x, y, z, name, volume, pitch) {};
World.playSoundAtEntity = function(entity, name, volume, pitch) {};

var Entity = {};
Entity.getAll = function() {return [];};
Entity.getAllJS = function() {return [];};
Entity.getExtra = function(ent, name) {return null;};
Entity.putExtra = function(ent, name, extra) {};
Entity.getExtraJson = function(ent, name) {return {};};
Entity.putExtraJson = function(ent, name, obj) {};
Entity.addEffect = function(ent, effectId, effectData, effectTime, ambiance, particles) {};
Entity.clearEffect = function(ent, id) {};
Entity.clearEffects = function(ent) {};
Entity.damageEntity = function(ent, damage, cause, params) {};
Entity.healEntity = function(ent, heal) {};
Entity.getType = function(ent) {};
Entity.getTypeUniversal = function(ent) {};
Entity.getTypeAddon = function(ent) {return null;};
Entity.getCompoundTag = function(ent) {};
Entity.setCompoundTag = function(ent, tag) {};
Entity.setHitbox = function(ent, w, h) {};
Entity.isExist = function(entity) {};
Entity.getDimension = function(entity) {};
Entity.spawn = function() {};
Entity.spawnAtCoords = function() {};
Entity.spawnCustom = function(name, x, y, z, extra) {};
Entity.spawnCustomAtCoords = function(name, coords, extra) {};
Entity.spawnAddon = function(x, y, z, name) {return null;};
Entity.spawnAddonAtCoords = function(coords, name) {return null;};
Entity.getAddonEntity = function(entity) {return null;};
Entity.remove = function(entity) {};
Entity.getCustom = function(entity) {return null;};
Entity.getAge = function(ent) {};
Entity.setAge = function(ent, age) {};
Entity.getSkin = function(ent) {return "missing_texture.png";};
Entity.setSkin = function(ent, skin) {};
Entity.setTexture = function(ent, texture) {};
Entity.getRender = function(ent) {};
Entity.setRender = function(ent, render) {};
Entity.rideAnimal = function(ent1, ent2) {};
Entity.getNameTag = function(ent) {};
Entity.setNameTag = function(ent, tag) {};
Entity.getTarget = function(ent) {};
Entity.setTarget = function(ent, target) {};
Entity.getMobile = function(ent, mobile) {};
Entity.setMobile = function(ent, mobile) {};
Entity.getSneaking = function(ent) {};
Entity.setSneaking = function(ent, sneak) {};
Entity.getRider = function(ent) {};
Entity.getRiding = function(ent) {};
Entity.setFire = function(ent, fire, force) {};
Entity.health = function(entity) {return {};};
Entity.getHealth = function(ent) {};
Entity.setHealth = function(ent, health) {};
Entity.getMaxHealth = function(ent) {};
Entity.setMaxHealth = function(ent, health) {};
Entity.setPosition = function(ent, x, y, z) {};
Entity.getPosition = function(ent) {};
Entity.addPosition = function(ent, x, y, z) {};
Entity.setVelocity = function(ent, x, y, z) {};
Entity.getVelocity = function(ent) {};
Entity.addVelocity = function(ent, x, y, z) {};
Entity.getDistanceBetweenCoords = function(coords1, coords2) {return 2.23606797749979;};
Entity.getDistanceToCoords = function(ent, coords) {};
Entity.getDistanceToEntity = function(ent1, ent2) {};
Entity.getXZPlayerDis = function(entity) {};
Entity.getLookAngle = function(ent) {};
Entity.setLookAngle = function(ent, yaw, pitch) {};
Entity.getLookVectorByAngle = function(angle) {return {"x":0,"y":0,"z":1};};
Entity.getLookVector = function(ent) {};
Entity.getLookAt = function(ent, x, y, z) {return {"yaw":null,"pitch":null};};
Entity.lookAt = function(ent, x, y, z) {};
Entity.lookAtCoords = function(ent, coords) {};
Entity.moveToTarget = function(ent, target, params) {};
Entity.moveToAngle = function(ent, angle, params) {};
Entity.moveToLook = function(ent, params) {};
Entity.getMovingVector = function(ent) {};
Entity.getMovingAngle = function(ent) {};
Entity.getMovingAngleByPositions = function(pos1, pos2) {};
Entity.findNearest = function(coords, type, maxRange) {return null;};
Entity.getAllInRange = function(coords, maxRange, type) {return [];};
Entity.getInventory = function(ent, handleNames, handleEnchant) {};
Entity.getArmorSlot = function(ent, slot) {return {"id":0,"count":0,"data":0,"extra":null};};
Entity.setArmorSlot = function(ent, slot, id, count, data, extra) {};
Entity.getCarriedItem = function(ent, bool1, bool2) {};
Entity.setCarriedItem = function(ent, id, count, data, extra) {};
Entity.getOffhandItem = function(ent, bool1, bool2) {};
Entity.setOffhandItem = function(ent, id, count, data, extra) {};
Entity.getDroppedItem = function(ent) {};
Entity.setDroppedItem = function(ent, id, count, data, extra) {};
Entity.getProjectileItem = function(projectile) {return {"id":0,"count":0,"data":0,"extra":null};};
Entity.getAttribute = function(ent, attribute) {};
Entity.getPathNavigation = function(ent) {};
Entity.getAllInsideBox = function(pos1, pos2, type, flag) {return [];};

var AddonEntityRegistry = {};
AddonEntityRegistry.data = {};
AddonEntityRegistry.awaitCallback = null;
AddonEntityRegistry.spawn = function(x, y, z, nameID) {return null;};
AddonEntityRegistry.getEntityData = function(entity) {return null;};
AddonEntityRegistry.onEntityAdded = function(entity) {};

var Player = {};
Player.get = function() {};
Player.getNameForEnt = function(ent) {};
Player.getName = function() {};
Player.getDimension = function() {};
Player.isPlayer = function(ent) {};
Player.getPointed = function() {return {"pos":{"x":0,"y":0,"z":0,"side":0},"vec":{"x":0,"y":0,"z":0},"entity":-1,"block":{"id":0,"data":0}};};
Player.getInventory = function(loadPart, handleEnchant, handleNames) {};
Player.addItemToInventory = function(id, count, data, extra, preventDrop) {};
Player.getCarriedItem = function(handleEnchant, handleNames) {return {"id":0,"count":0,"data":0,"extra":null};};
Player.setCarriedItem = function(id, count, data, extra) {};
Player.getOffhandItem = function() {return {"id":0,"count":0,"data":0,"extra":null};};
Player.setOffhandItem = function(id, count, data, extra) {};
Player.decreaseCarriedItem = function(count) {};
Player.getInventorySlot = function(slot) {return {"id":0,"count":0,"data":0,"extra":null};};
Player.setInventorySlot = function(slot, id, count, data, extra) {};
Player.getArmorSlot = function(slot) {return {"id":0,"count":0,"data":0,"extra":null};};
Player.setArmorSlot = function(slot, id, count, data, extra) {};
Player.getSelectedSlotId = function() {};
Player.setSelectedSlotId = function(slot) {};
Player.setPosition = function(x, y, z) {};
Player.getPosition = function() {return {"x":0,"y":0,"z":0};};
Player.addPosition = function(x, y, z) {};
Player.setVelocity = function(x, y, z) {};
Player.getVelocity = function() {return {"x":0,"y":0,"z":0};};
Player.addVelocity = function(x, y, z) {};
Player.experience = function() {return {};};
Player.getExperience = function() {};
Player.setExperience = function(exp) {};
Player.addExperience = function(exp) {};
Player.level = function() {return {};};
Player.getLevel = function() {};
Player.setLevel = function(level) {};
Player.addLevel = function(level) {};
Player.flying = function() {return {};};
Player.getFlyingEnabled = function() {};
Player.setFlyingEnabled = function(enabled) {};
Player.getFlying = function() {};
Player.setFlying = function(enabled) {};
Player.exhaustion = function() {return {};};
Player.getExhaustion = function() {};
Player.setExhaustion = function(value) {};
Player.hunger = function() {return {};};
Player.getHunger = function() {};
Player.setHunger = function(value) {};
Player.saturation = function() {return {};};
Player.getSaturation = function() {};
Player.setSaturation = function(value) {};
Player.health = function() {return {};};
Player.getHealth = function() {};
Player.setHealth = function(value) {};
Player.score = function() {return {};};
Player.getScore = function() {};
Player.setFov = function(fov) {};
Player.resetFov = function() {};
Player.setCameraEntity = function(ent) {};
Player.resetCameraEntity = function() {};
Player.setAbility = function(ability, value) {};
Player.getFloatAbility = function(ability) {};
Player.getBooleanAbility = function(ability) {};

var Game = {};
Game.prevent = function() {};
Game.isActionPrevented = function() {return true;};
Game.message = function(msg) {};
Game.tipMessage = function(msg) {};
Game.dialogMessage = function(message, title) {};
Game.setDifficulty = function(difficulty) {};
Game.getDifficulty = function() {};
Game.setGameMode = function(gameMode) {};
Game.getGameMode = function() {};
Game.getMinecraftVersion = function() {return "1.11.4";};
Game.getEngineVersion = function() {return "2.0";};
Game.spendItemsInCreative = true;
Game.isDeveloperMode = true;
Game.isItemSpendingAllowed = function() {return true;};
Game.simulateBackPressed = function() {};

function Render(params) {}
function Texture(path) {}
function EntityModel(parentModel) {}
function EntityModelWatcher(entity, model) {}
function EntityAIClass(customPrototype) {}
function EntityAIWatcher(customPrototype) {}
var EntityAI = {};
EntityAI.Idle = {};
EntityAI.Idle.getDefaultPriority = function() {return 1;};
EntityAI.Idle.getDefaultName = function() {return "idle";};
EntityAI.Idle.params = {};
EntityAI.Idle.setParams = function(params) {};
EntityAI.Idle.executionStarted = function() {};
EntityAI.Idle.executionEnded = function() {};
EntityAI.Idle.executionPaused = function() {};
EntityAI.Idle.executionResumed = function() {};
EntityAI.Idle.execute = function() {};
EntityAI.Idle.__execute = function() {};
EntityAI.Idle.setExecutionTimer = function(timer) {};
EntityAI.Idle.removeExecutionTimer = function() {};
EntityAI.Idle.data = {};
EntityAI.Idle.data.executionTimer = -1;
EntityAI.Idle.isInstance = false;
EntityAI.Idle.parent = null;
EntityAI.Idle.entity = null;
EntityAI.Idle.instantiate = function(parent, name) {return {"params":{},"data":{"executionTimer":-1},"isInstance":true,"parent":"test"};};
EntityAI.Idle.aiEntityChanged = function(entity) {};
EntityAI.Idle.finishExecution = function() {};
EntityAI.Idle.changeSelfPriority = function(priority) {};
EntityAI.Idle.enableAI = function(name, priority, extra) {};
EntityAI.Idle.disableAI = function(name) {};
EntityAI.Idle.setPriority = function(name, priority) {};
EntityAI.Idle.getAI = function(name) {};
EntityAI.Idle.getPriority = function(name) {};
EntityAI.Idle.attackedBy = function(entity) {};
EntityAI.Idle.hurtBy = function(entity) {};
EntityAI.Idle.projectileHit = function(projectile) {};
EntityAI.Idle.death = function(entity) {};
EntityAI.Idle.getDefaultPrioriy = function() {return 1;};
EntityAI.Follow = {};
EntityAI.Follow.getDefaultPriority = function() {return 1;};
EntityAI.Follow.getDefaultName = function() {return "basic-entity-ai";};
EntityAI.Follow.params = {};
EntityAI.Follow.params.speed = 0.2;
EntityAI.Follow.params.jumpVel = 0.45;
EntityAI.Follow.params.rotateSpeed = 0.4;
EntityAI.Follow.params.rotateRatio = 0.5;
EntityAI.Follow.params.rotateHead = true;
EntityAI.Follow.params.denyY = true;
EntityAI.Follow.setParams = function(params) {};
EntityAI.Follow.executionStarted = function() {};
EntityAI.Follow.executionEnded = function() {};
EntityAI.Follow.executionPaused = function() {};
EntityAI.Follow.executionResumed = function() {};
EntityAI.Follow.execute = function() {};
EntityAI.Follow.__execute = function() {};
EntityAI.Follow.setExecutionTimer = function(timer) {};
EntityAI.Follow.removeExecutionTimer = function() {};
EntityAI.Follow.data = {};
EntityAI.Follow.data.target = null;
EntityAI.Follow.data.targetEntity = null;
EntityAI.Follow.data.movingYaw = 0;
EntityAI.Follow.data.executionTimer = -1;
EntityAI.Follow.isInstance = false;
EntityAI.Follow.parent = null;
EntityAI.Follow.entity = null;
EntityAI.Follow.instantiate = function(parent, name) {return {"params":{"speed":0.2,"jumpVel":0.45,"rotateSpeed":0.4,"rotateRatio":0.5,"rotateHead":true,"denyY":true},"data":{"target":null,"targetEntity":null,"movingYaw":0,"executionTimer":-1},"isInstance":true,"parent":"test"};};
EntityAI.Follow.aiEntityChanged = function(entity) {};
EntityAI.Follow.finishExecution = function() {};
EntityAI.Follow.changeSelfPriority = function(priority) {};
EntityAI.Follow.enableAI = function(name, priority, extra) {};
EntityAI.Follow.disableAI = function(name) {};
EntityAI.Follow.setPriority = function(name, priority) {};
EntityAI.Follow.getAI = function(name) {};
EntityAI.Follow.getPriority = function(name) {};
EntityAI.Follow.attackedBy = function(entity) {};
EntityAI.Follow.hurtBy = function(entity) {};
EntityAI.Follow.projectileHit = function(projectile) {};
EntityAI.Follow.death = function(entity) {};
EntityAI.Panic = {};
EntityAI.Panic.getDefaultPriority = function() {return 3;};
EntityAI.Panic.getDefaultName = function() {return "panic";};
EntityAI.Panic.params = {};
EntityAI.Panic.params.speed = 0.22;
EntityAI.Panic.params.angular_speed = 0.5;
EntityAI.Panic.setParams = function(params) {};
EntityAI.Panic.executionStarted = function() {};
EntityAI.Panic.executionEnded = function() {};
EntityAI.Panic.executionPaused = function() {};
EntityAI.Panic.executionResumed = function() {};
EntityAI.Panic.execute = function() {};
EntityAI.Panic.__execute = function() {};
EntityAI.Panic.setExecutionTimer = function(timer) {};
EntityAI.Panic.removeExecutionTimer = function() {};
EntityAI.Panic.data = {};
EntityAI.Panic.data.yaw = 4.627930617495301;
EntityAI.Panic.data.add = 0;
EntityAI.Panic.data.executionTimer = -1;
EntityAI.Panic.isInstance = false;
EntityAI.Panic.parent = null;
EntityAI.Panic.entity = null;
EntityAI.Panic.instantiate = function(parent, name) {return {"params":{"speed":0.22,"angular_speed":0.5},"data":{"yaw":4.627930617495301,"add":0,"executionTimer":-1},"isInstance":true,"parent":"test"};};
EntityAI.Panic.aiEntityChanged = function(entity) {};
EntityAI.Panic.finishExecution = function() {};
EntityAI.Panic.changeSelfPriority = function(priority) {};
EntityAI.Panic.enableAI = function(name, priority, extra) {};
EntityAI.Panic.disableAI = function(name) {};
EntityAI.Panic.setPriority = function(name, priority) {};
EntityAI.Panic.getAI = function(name) {};
EntityAI.Panic.getPriority = function(name) {};
EntityAI.Panic.attackedBy = function(entity) {};
EntityAI.Panic.hurtBy = function(entity) {};
EntityAI.Panic.projectileHit = function(projectile) {};
EntityAI.Panic.death = function(entity) {};
EntityAI.Panic.randomize = function() {};
EntityAI.Wander = {};
EntityAI.Wander.getDefaultPriority = function() {return 2;};
EntityAI.Wander.getDefaultName = function() {return "wander";};
EntityAI.Wander.params = {};
EntityAI.Wander.params.speed = 0.08;
EntityAI.Wander.params.angular_speed = 0.1;
EntityAI.Wander.params.delay_weight = 0.3;
EntityAI.Wander.setParams = function(params) {};
EntityAI.Wander.executionStarted = function() {};
EntityAI.Wander.executionEnded = function() {};
EntityAI.Wander.executionPaused = function() {};
EntityAI.Wander.executionResumed = function() {};
EntityAI.Wander.execute = function() {};
EntityAI.Wander.__execute = function() {};
EntityAI.Wander.setExecutionTimer = function(timer) {};
EntityAI.Wander.removeExecutionTimer = function() {};
EntityAI.Wander.data = {};
EntityAI.Wander.data.yaw = 2.766359942150908;
EntityAI.Wander.data.add = 0;
EntityAI.Wander.data.delay = false;
EntityAI.Wander.data._delay = true;
EntityAI.Wander.data.executionTimer = -1;
EntityAI.Wander.isInstance = false;
EntityAI.Wander.parent = null;
EntityAI.Wander.entity = null;
EntityAI.Wander.instantiate = function(parent, name) {return {"params":{"speed":0.08,"angular_speed":0.1,"delay_weight":0.3},"data":{"yaw":2.766359942150908,"add":0,"delay":false,"_delay":true,"executionTimer":-1},"isInstance":true,"parent":"test"};};
EntityAI.Wander.aiEntityChanged = function(entity) {};
EntityAI.Wander.finishExecution = function() {};
EntityAI.Wander.changeSelfPriority = function(priority) {};
EntityAI.Wander.enableAI = function(name, priority, extra) {};
EntityAI.Wander.disableAI = function(name) {};
EntityAI.Wander.setPriority = function(name, priority) {};
EntityAI.Wander.getAI = function(name) {};
EntityAI.Wander.getPriority = function(name) {};
EntityAI.Wander.attackedBy = function(entity) {};
EntityAI.Wander.hurtBy = function(entity) {};
EntityAI.Wander.projectileHit = function(projectile) {};
EntityAI.Wander.death = function(entity) {};
EntityAI.Wander.randomize = function() {};
EntityAI.Attack = {};
EntityAI.Attack.getDefaultPriority = function() {return 1;};
EntityAI.Attack.getDefaultName = function() {return "basic-entity-ai";};
EntityAI.Attack.params = {};
EntityAI.Attack.params.attack_damage = 5;
EntityAI.Attack.params.attack_range = 2.5;
EntityAI.Attack.params.attack_rate = 12;
EntityAI.Attack.setParams = function(params) {};
EntityAI.Attack.executionStarted = function() {};
EntityAI.Attack.executionEnded = function() {};
EntityAI.Attack.executionPaused = function() {};
EntityAI.Attack.executionResumed = function() {};
EntityAI.Attack.execute = function() {};
EntityAI.Attack.__execute = function() {};
EntityAI.Attack.setExecutionTimer = function(timer) {};
EntityAI.Attack.removeExecutionTimer = function() {};
EntityAI.Attack.data = {};
EntityAI.Attack.data.timer = 0;
EntityAI.Attack.data.target = null;
EntityAI.Attack.data.executionTimer = -1;
EntityAI.Attack.isInstance = false;
EntityAI.Attack.parent = null;
EntityAI.Attack.entity = null;
EntityAI.Attack.instantiate = function(parent, name) {return {"params":{"attack_damage":5,"attack_range":2.5,"attack_rate":12},"data":{"timer":0,"target":null,"executionTimer":-1},"isInstance":true,"parent":"test"};};
EntityAI.Attack.aiEntityChanged = function(entity) {};
EntityAI.Attack.finishExecution = function() {};
EntityAI.Attack.changeSelfPriority = function(priority) {};
EntityAI.Attack.enableAI = function(name, priority, extra) {};
EntityAI.Attack.disableAI = function(name) {};
EntityAI.Attack.setPriority = function(name, priority) {};
EntityAI.Attack.getAI = function(name) {};
EntityAI.Attack.getPriority = function(name) {};
EntityAI.Attack.attackedBy = function(entity) {};
EntityAI.Attack.hurtBy = function(entity) {};
EntityAI.Attack.projectileHit = function(projectile) {};
EntityAI.Attack.death = function(entity) {};
EntityAI.Swim = {};
EntityAI.Swim.getDefaultPriority = function() {return -1;};
EntityAI.Swim.getDefaultName = function() {return "swim";};
EntityAI.Swim.params = {};
EntityAI.Swim.params.velocity = 0.2;
EntityAI.Swim.setParams = function(params) {};
EntityAI.Swim.executionStarted = function() {};
EntityAI.Swim.executionEnded = function() {};
EntityAI.Swim.executionPaused = function() {};
EntityAI.Swim.executionResumed = function() {};
EntityAI.Swim.execute = function() {};
EntityAI.Swim.__execute = function() {};
EntityAI.Swim.setExecutionTimer = function(timer) {};
EntityAI.Swim.removeExecutionTimer = function() {};
EntityAI.Swim.data = {};
EntityAI.Swim.data.executionTimer = -1;
EntityAI.Swim.isInstance = false;
EntityAI.Swim.parent = null;
EntityAI.Swim.entity = null;
EntityAI.Swim.instantiate = function(parent, name) {return {"params":{"velocity":0.2},"data":{"executionTimer":-1},"isInstance":true,"parent":"test","inWater":false};};
EntityAI.Swim.aiEntityChanged = function(entity) {};
EntityAI.Swim.finishExecution = function() {};
EntityAI.Swim.changeSelfPriority = function(priority) {};
EntityAI.Swim.enableAI = function(name, priority, extra) {};
EntityAI.Swim.disableAI = function(name) {};
EntityAI.Swim.setPriority = function(name, priority) {};
EntityAI.Swim.getAI = function(name) {};
EntityAI.Swim.getPriority = function(name) {};
EntityAI.Swim.attackedBy = function(entity) {};
EntityAI.Swim.hurtBy = function(entity) {};
EntityAI.Swim.projectileHit = function(projectile) {};
EntityAI.Swim.death = function(entity) {};
EntityAI.Swim.inWater = false;
EntityAI.PanicWatcher = {};
EntityAI.PanicWatcher.parent = null;
EntityAI.PanicWatcher.getDefaultPriority = function() {return -1;};
EntityAI.PanicWatcher.getDefaultName = function() {return "basic-entity-ai";};
EntityAI.PanicWatcher.params = {};
EntityAI.PanicWatcher.params.panic_time = 200;
EntityAI.PanicWatcher.params.priority_panic = 5;
EntityAI.PanicWatcher.params.priority_default = 1;
EntityAI.PanicWatcher.params.name = "panic";
EntityAI.PanicWatcher.setParams = function(params) {};
EntityAI.PanicWatcher.executionStarted = function() {};
EntityAI.PanicWatcher.executionEnded = function() {};
EntityAI.PanicWatcher.executionPaused = function() {};
EntityAI.PanicWatcher.executionResumed = function() {};
EntityAI.PanicWatcher.execute = function() {};
EntityAI.PanicWatcher.__execute = function() {};
EntityAI.PanicWatcher.setExecutionTimer = function(timer) {};
EntityAI.PanicWatcher.removeExecutionTimer = function() {};
EntityAI.PanicWatcher.data = {};
EntityAI.PanicWatcher.data.timer = -1;
EntityAI.PanicWatcher.data.executionTimer = -1;
EntityAI.PanicWatcher.isInstance = false;
EntityAI.PanicWatcher.entity = null;
EntityAI.PanicWatcher.instantiate = function(parent, name) {return {"parent":"test","params":{"panic_time":200,"priority_panic":5,"priority_default":1,"name":"panic"},"data":{"timer":-1,"executionTimer":-1},"isInstance":true};};
EntityAI.PanicWatcher.aiEntityChanged = function(entity) {};
EntityAI.PanicWatcher.finishExecution = function() {};
EntityAI.PanicWatcher.changeSelfPriority = function(priority) {};
EntityAI.PanicWatcher.enableAI = function(name, priority, extra) {};
EntityAI.PanicWatcher.disableAI = function(name) {};
EntityAI.PanicWatcher.setPriority = function(name, priority) {};
EntityAI.PanicWatcher.getAI = function(name) {};
EntityAI.PanicWatcher.getPriority = function(name) {};
EntityAI.PanicWatcher.attackedBy = function(entity) {};
EntityAI.PanicWatcher.hurtBy = function() {};
EntityAI.PanicWatcher.projectileHit = function(projectile) {};
EntityAI.PanicWatcher.death = function(entity) {};

var GenerationUtils = {};
GenerationUtils.isTerrainBlock = function(id) {};
GenerationUtils.isTransparentBlock = function(id) {};
GenerationUtils.canSeeSky = function(x, y, z) {};
GenerationUtils.randomXZ = function(cx, cz) {return {"x":null,"z":null};};
GenerationUtils.randomCoords = function(cx, cz, lowest, highest) {return {"x":null,"z":null,"y":34};};
GenerationUtils.findSurface = function(x, y, z) {return {"x":0,"y":0,"z":0};};
GenerationUtils.findHighSurface = function(x, z) {return {"x":0,"y":0,"z":0};};
GenerationUtils.findLowSurface = function(x, z) {return {"x":0,"y":0,"z":0};};
GenerationUtils.__lockedReal = {};
GenerationUtils.__lockedReal.id = 0;
GenerationUtils.__lockedReal.data = 0;
GenerationUtils.lockInBlock = function(id, data, checkerTile, checkerMode) {};
GenerationUtils.setLockedBlock = function(x, y, z) {};
GenerationUtils.genMinable = function(x, y, z, params) {};
GenerationUtils.generateOre = function(x, y, z, id, data, amount, noStoneCheck) {};
GenerationUtils.generateOreCustom = function(x, y, z, id, data, amount, whitelist, blocks) {};
GenerationUtils.getPerlinNoise = function() {};

var Animation = {};
Animation.base = function(x, y, z) {};
Animation.Base = function(x, y, z) {};
Animation.item = function(x, y, z) {};
Animation.Item = function(x, y, z) {};

var Particles = {};
var IDRegistry = {};
var IDData = {};
var Block = {};
Block.dropFunctions = {};
Block.popResourceFunctions = {};
Block.entityInsideFunctions = {};
Block.entityStepOnFunctions = {};
Block.neighbourChangeFunctions = {};
Block.getNumericId = function(id) {return 1;};
Block.createBlock = function(namedID, defineData, blockType) {};
Block.createBlockWithRotation = function(namedID, defineData, blockType) {};
Block.isNativeTile = function(id) {return true;};
Block.convertBlockToItemId = function(id) {return 1;};
Block.convertItemToBlockId = function(id) {return 1;};
Block.registerDropFunctionForID = function(numericID, dropFunc, level) {return true;};
Block.registerDropFunction = function(namedID, dropFunc, level) {return true;};
Block.defaultDropFunction = function(blockCoords, blockID, blockData, diggingLevel) {return null;};
Block.registerPopResourcesFunctionForID = function(numericID, func) {return true;};
Block.registerPopResourcesFunction = function(nameID, func) {return true;};
Block.registerEntityInsideFunctionForID = function(numericID, func) {return true;};
Block.registerEntityInsideFunction = function(nameID, func) {return true;};
Block.registerEntityStepOnFunctionForID = function(numericID, func) {return true;};
Block.registerEntityStepOnFunction = function(nameID, func) {return true;};
Block.registerNeighbourChangeFunctionForID = function(numericID, func) {return true;};
Block.registerNeighbourChangeFunction = function(nameID, func) {return true;};
Block.getDropFunction = function(id) {return function(blockCoords, blockID, blockData, diggingLevel) {};};
Block.setDestroyLevelForID = function(id, level, resetData) {};
Block.setDestroyLevel = function(namedID, level, resetData) {};
Block.setDestroyTime = function(namedID, time) {};
Block.isSolid = function(numericID) {};
Block.getDestroyTime = function(numericID) {};
Block.getExplosionResistance = function(numericID) {};
Block.getFriction = function(numericID) {};
Block.getTranslucency = function(numericID) {};
Block.getLightLevel = function(numericID) {};
Block.getLightOpacity = function(numericID) {};
Block.getRenderLayer = function(numericID) {};
Block.getRenderType = function(numericID) {};
Block.getBlockAtlasTextureCoords = function(name, id) {return {"u1":0,"v1":0,"u2":0,"v2":0};};
Block.setTempDestroyTime = function(numericID, time) {};
Block.setBlockMaterial = function(namedID, material, level) {return true;};
Block.setRedstoneTile = function(namedID, data, isRedstone) {};
Block.setupAsRedstoneReceiver = function(namedID, connectToRedstone) {};
Block.setupAsRedstoneEmitter = function(namedID, connectToRedstone) {};
Block.setupAsNonRedstoneTile = function(namedID) {};
Block.onBlockDestroyed = function(coords, fullTile, byHand) {};
Block.onBlockPoppedResources = function(coords, block, f, i) {};
Block.onEventEntityInside = function(coords, block, entity) {};
Block.onEventEntityStepOn = function(coords, block, entity) {};
Block.onEventNeigbourChanged = function(coords, block, changeCoords) {};
Block.getBlockDropViaItem = function(block, item, coords) {return null;};
Block.placeFuncs = new Array(8193);
Block.registerPlaceFunctionForID = function(block, func) {};
Block.registerPlaceFunction = function(namedID, func) {};
Block.getPlaceFunc = function(block) {};
Block.setBlockShape = function(id, pos1, pos2, data) {};
Block.setShape = function(id, x1, y1, z1, x2, y2, z2, data) {};
Block.createSpecialType = function(description, nameKey) {return "_CE";};
Block.setRandomTickCallback = function(id, callback) {};
Block.setAnimateTickCallback = function(id, callback) {};
Block.TYPE_BASE = "createBlock";
Block.TYPE_ROTATION = "createBlockWithRotation";
Block.setPrototype = function(namedID, Prototype) {};

var ItemModel = {};
var BlockRenderer = {};
var ICRender = {};
var Item = {};
Item.useFunctions = {};
Item.throwableFunctions = {};
Item.getNumericId = function(id) {return 1;};
Item.getItemById = function(id) {return null;};
Item.createItem = function(namedID, name, texture, params) {};
Item.createFoodItem = function(namedID, name, texture, params) {return null;};
Item.createFuelItem = function(namedID, name, texture, params) {};
Item.createArmorItem = function(namedID, name, texture, params) {};
Item.createThrowableItem = function(namedID, name, texture, params) {};
Item.isNativeItem = function(id) {};
Item.getMaxDamage = function(id) {};
Item.getMaxStack = function(id) {return 64;};
Item.getName = function(id, data, encode) {return "";};
Item.isValid = function(id, data) {};
Item.addToCreative = function(id, count, data, extra) {};
Item.addCreativeGroup = function(name, displayedName, ids) {};
Item.describeItem = function(numericID, description) {};
Item.setCategory = function(id, category) {};
Item.setEnchantType = function(id, enchant, value) {};
Item.setArmorDamageable = function(id, val) {};
Item.addRepairItemIds = function(id, items) {};
Item.setToolRender = function(id, enabled) {};
Item.setMaxDamage = function(id, maxdamage) {};
Item.setGlint = function(id, enabled) {};
Item.setLiquidClip = function(id, enabled) {};
Item.setStackedByData = function(id, enabled) {};
Item.setAllowedInOffhand = function(id, allowed) {};
Item.setProperties = function(id, props) {};
Item.setUseAnimation = function(id, animType) {};
Item.setMaxUseDuration = function(id, duration) {};
Item.registerUseFunctionForID = function(numericID, useFunc) {return true;};
Item.registerUseFunction = function(namedID, useFunc) {};
Item.onItemUsed = function(coords, item, block) {};
Item.registerThrowableFunctionForID = function(numericID, useFunc) {return true;};
Item.registerThrowableFunction = function(namedID, useFunc) {};
Item.onProjectileHit = function(projectile, item, target) {};
Item.iconOverrideFunctions = {};
Item.registerIconOverrideFunction = function(namedID, func) {};
Item.onIconOverride = function(item, isModUi) {};
Item.nameOverrideFunctions = {};
Item.setItemNameOverrideCallbackForced = function() {};
Item.registerNameOverrideFunction = function(namedID, func, preventForcing) {};
Item.onNameOverride = function(item, name, translation) {};
Item.noTargetUseFunctions = {};
Item.registerNoTargetUseFunction = function(namedID, func) {};
Item.onUseNoTarget = function(item) {};
Item.usingReleasedFunctions = {};
Item.registerUsingReleasedFunction = function(namedID, func) {};
Item.onUsingReleased = function(item, ticks) {};
Item.usingCompleteFunctions = {};
Item.registerUsingCompleteFunction = function(namedID, func) {};
Item.onUsingComplete = function(item) {};
Item.dispenseFunctions = {};
Item.registerDispenseFunction = function(namedID, func) {};
Item.onDispense = function(coords, item) {};
Item.TYPE_BASE = "createItem";
Item.TYPE_FOOD = "createFoodItem";
Item.TYPE_ARMOR = "createArmorItem";
Item.TYPE_THROWABLE = "createThrowableItem";
Item.setPrototype = function(namedID, Prototype) {};
Item.invokeItemUseOn = function(coords, item, noModCallback, entity) {};
Item.invokeItemUseNoTarget = function(item, noModCallback) {};

var Recipes = {};
var ToolAPI = {};
ToolAPI.blockMaterials = {};
ToolAPI.toolMaterials = {};
ToolAPI.toolData = {};
ToolAPI.blockData = {};
ToolAPI.needDamagableItemFix = false;
ToolAPI.addBlockMaterial = function(name, breakingMultiplier) {};
ToolAPI.addToolMaterial = function(name, material) {};
ToolAPI.registerTool = function(id, toolMaterial, blockMaterials, params) {};
ToolAPI.registerSword = function(id, toolMaterial, params) {};
ToolAPI.registerBlockMaterial = function(uid, materialName, level, isNative) {};
ToolAPI.registerBlockDiggingLevel = function(uid, level) {};
ToolAPI.registerBlockMaterialAsArray = function(materialName, UIDs, isNative) {};
ToolAPI.refresh = function() {};
ToolAPI.getBlockData = function(blockID) {return {"material":{"multiplier":3.3333333333333335,"name":"stone"},"level":1,"isNative":true};};
ToolAPI.getBlockMaterial = function(blockID) {return {"multiplier":3.3333333333333335,"name":"stone"};};
ToolAPI.getBlockDestroyLevel = function(blockID) {return 1;};
ToolAPI.getEnchantExtraData = function(extra) {return {"silk":false,"fortune":0,"efficiency":0,"unbreaking":0,"experience":0};};
ToolAPI.fortuneDropModifier = function(drop, level) {};
ToolAPI.getDestroyTimeViaTool = function(fullBlock, toolItem, coords, ignoreNative) {};
ToolAPI.getToolData = function(itemID) {return null;};
ToolAPI.getToolLevel = function(itemID) {};
ToolAPI.getToolLevelViaBlock = function(itemID, blockID) {};
ToolAPI.getCarriedToolData = function() {return null;};
ToolAPI.getCarriedToolLevel = function() {};
ToolAPI.startDestroyHook = function(coords, block, carried) {};
ToolAPI.destroyBlockHook = function(coords, block, item) {};
ToolAPI.LastAttackTime = 0;
ToolAPI.playerAttackHook = function(attacker, victim, item) {};
ToolAPI.resetEngine = function() {};
ToolAPI.dropExpOrbs = function(x, y, z, value) {};
ToolAPI.dropOreExp = function(coords, minVal, maxVal, modifier) {};
ToolAPI.getBlockMaterialName = function(blockID) {return "stone";};

var Armor = {};
Armor.registerFuncs = function(id, funcs) {};
Armor.preventDamaging = function(id) {};

var LiquidRegistry = {};
LiquidRegistry.liquidStorageSaverId = 1306847136;
LiquidRegistry.registerLiquid = function(key, name, uiTextures, modelTextures) {};
LiquidRegistry.getLiquidData = function(key) {return {"key":"lava","name":"test","uiTextures":[],"uiCache":{},"modelTextures":[]};};
LiquidRegistry.isExists = function(key) {return true;};
LiquidRegistry.getLiquidName = function(key) {return "test";};
LiquidRegistry.getLiquidUITexture = function(key, width, height) {return "missing_texture";};
LiquidRegistry.getLiquidUIBitmap = function() {};
LiquidRegistry.FullByEmpty = {};
LiquidRegistry.EmptyByFull = {};
LiquidRegistry.registerItem = function(liquid, empty, full) {};
LiquidRegistry.getEmptyItem = function(id, data) {};
LiquidRegistry.getItemLiquid = function(id, data) {};
LiquidRegistry.getFullItem = function(id, data, liquid) {};
LiquidRegistry.Storage = function(tileEntity) {};

var Native = {};
Native.ArmorType = {};
Native.ArmorType.boots = 3;
Native.ArmorType.chestplate = 1;
Native.ArmorType.helmet = 0;
Native.ArmorType.leggings = 2;
Native.ItemCategory = {};
Native.ItemCategory.DECORATION = 2;
Native.ItemCategory.FOOD = 4;
Native.ItemCategory.INTERNAL = 0;
Native.ItemCategory.MATERIAL = 1;
Native.ItemCategory.TOOL = 3;
Native.ParticleType = {};
Native.ParticleType.angryVillager = 32;
Native.ParticleType.bubble = 1;
Native.ParticleType.cloud = 4;
Native.ParticleType.crit = 2;
Native.ParticleType.dripLava = 24;
Native.ParticleType.dripWater = 23;
Native.ParticleType.enchantmenttable = 34;
Native.ParticleType.fallingDust = 26;
Native.ParticleType.flame = 7;
Native.ParticleType.happyVillager = 33;
Native.ParticleType.heart = 17;
Native.ParticleType.hugeexplosion = 14;
Native.ParticleType.hugeexplosionSeed = 15;
Native.ParticleType.ink = 25;
Native.ParticleType.itemBreak = 12;
Native.ParticleType.largeexplode = 5;
Native.ParticleType.lava = 8;
Native.ParticleType.mobFlame = 16;
Native.ParticleType.note = 36;
Native.ParticleType.portal = 20;
Native.ParticleType.rainSplash = 21;
Native.ParticleType.redstone = 10;
Native.ParticleType.slime = 30;
Native.ParticleType.smoke = 4;
Native.ParticleType.smoke2 = 9;
Native.ParticleType.snowballpoof = 13;
Native.ParticleType.spell = 29;
Native.ParticleType.spell2 = 28;
Native.ParticleType.spell3 = 27;
Native.ParticleType.splash = 22;
Native.ParticleType.suspendedTown = 19;
Native.ParticleType.terrain = 16;
Native.ParticleType.waterWake = 31;
Native.Color = {};
Native.Color.AQUA = "§b";
Native.Color.BEGIN = "§";
Native.Color.BLACK = "§0";
Native.Color.BLUE = "§9";
Native.Color.BOLD = "§l";
Native.Color.DARK_AQUA = "§3";
Native.Color.DARK_BLUE = "§1";
Native.Color.DARK_GRAY = "§8";
Native.Color.DARK_GREEN = "§2";
Native.Color.DARK_PURPLE = "§5";
Native.Color.DARK_RED = "§4";
Native.Color.GOLD = "§6";
Native.Color.GRAY = "§7";
Native.Color.GREEN = "§a";
Native.Color.ITALIC = "§o";
Native.Color.LIGHT_PURPLE = "§d";
Native.Color.OBFUSCATED = "§k";
Native.Color.RED = "§c";
Native.Color.RESET = "§r";
Native.Color.STRIKETHROUGH = "§m";
Native.Color.UNDERLINE = "§n";
Native.Color.WHITE = "§f";
Native.Color.YELLOW = "§e";
Native.EntityType = {};
Native.EntityType.AREA_EFFECT_CLOUD = 95;
Native.EntityType.ARMOR_STAND = 61;
Native.EntityType.ARROW = 80;
Native.EntityType.BAT = 19;
Native.EntityType.BLAZE = 43;
Native.EntityType.BOAT = 90;
Native.EntityType.CAT = 75;
Native.EntityType.CAVE_SPIDER = 40;
Native.EntityType.CHEST_MINECART = 98;
Native.EntityType.CHICKEN = 10;
Native.EntityType.COD = 112;
Native.EntityType.COMMAND_BLOCK_MINECART = 100;
Native.EntityType.COW = 11;
Native.EntityType.CREEPER = 33;
Native.EntityType.DOLPHIN = 31;
Native.EntityType.DONKEY = 24;
Native.EntityType.DRAGON_FIREBOLL = 79;
Native.EntityType.DROWNED = 110;
Native.EntityType.EGG = 82;
Native.EntityType.ENDERMAN = 38;
Native.EntityType.ENDERMITE = 55;
Native.EntityType.ENDER_CRYSTAL = 71;
Native.EntityType.ENDER_DRAGON = 53;
Native.EntityType.ENDER_GUARDIAN = 50;
Native.EntityType.ENDER_GUARDIAN_GHOST = 120;
Native.EntityType.ENDER_PEARL = 87;
Native.EntityType.EVOCATION_FANG = 103;
Native.EntityType.EVOCATION_ILLAGER = 104;
Native.EntityType.EXPERIENCE_ORB = 69;
Native.EntityType.EXPERIENCE_POTION = 68;
Native.EntityType.EYE_OF_ENDER_SIGNAL = 70;
Native.EntityType.FALLING_BLOCK = 66;
Native.EntityType.FIREBALL = 85;
Native.EntityType.FIREWORKS_ROCKET = 72;
Native.EntityType.FISHING_HOOK = 77;
Native.EntityType.GHAST = 41;
Native.EntityType.GUARDIAN = 49;
Native.EntityType.HOPPER_MINECART = 96;
Native.EntityType.HORSE = 23;
Native.EntityType.HUSK = 47;
Native.EntityType.IRON_GOLEM = 20;
Native.EntityType.ITEM = 64;
Native.EntityType.LAVA_SLIME = 42;
Native.EntityType.LEASH_KNOT = 88;
Native.EntityType.LIGHTNING_BOLT = 93;
Native.EntityType.LINGERING_POTION = 101;
Native.EntityType.LLAMA = 29;
Native.EntityType.LLAMA_SPLIT = 102;
Native.EntityType.MINECART = 84;
Native.EntityType.MOVING_BLOCK = 67;
Native.EntityType.MULE = 25;
Native.EntityType.MUSHROOM_COW = 16;
Native.EntityType.OCELOT = 22;
Native.EntityType.PAINTING = 83;
Native.EntityType.PANDA = 113;
Native.EntityType.PARROT = 30;
Native.EntityType.PHANTOM = 58;
Native.EntityType.PIG = 12;
Native.EntityType.PIG_ZOMBIE = 36;
Native.EntityType.PILLAGER = 114;
Native.EntityType.PLAYER = 63;
Native.EntityType.POLAR_BEAR = 28;
Native.EntityType.PRIMED_TNT = 65;
Native.EntityType.PUFFERFISH = 108;
Native.EntityType.RABBIT = 18;
Native.EntityType.RAVAGER = 59;
Native.EntityType.SALMON = 109;
Native.EntityType.SHEEP = 13;
Native.EntityType.SHIELD = 117;
Native.EntityType.SHULKER = 54;
Native.EntityType.SHULKER_BULLET = 76;
Native.EntityType.SILVERFISH = 39;
Native.EntityType.SKELETON = 34;
Native.EntityType.SKELETON_HORSE = 26;
Native.EntityType.SLIME = 37;
Native.EntityType.SMALL_FIREBALL = 94;
Native.EntityType.SNOWBALL = 81;
Native.EntityType.SNOW_GOLEM = 21;
Native.EntityType.SPIDER = 35;
Native.EntityType.SQUID = 17;
Native.EntityType.STRAY = 46;
Native.EntityType.THROWN_POTION = 86;
Native.EntityType.THROWN_TRIDENT = 73;
Native.EntityType.TNT_COMMAND = 97;
Native.EntityType.TROPICALFISH = 111;
Native.EntityType.TURTLE = 74;
Native.EntityType.VEX = 105;
Native.EntityType.VILLAGER = 15;
Native.EntityType.VILLAGER_V2 = 115;
Native.EntityType.VINDICATOR = 57;
Native.EntityType.WANDERING_TRADER = 118;
Native.EntityType.WHITCH = 45;
Native.EntityType.WHITHER = 52;
Native.EntityType.WHITHER_SKELETON = 48;
Native.EntityType.WHITHER_SKULL = 89;
Native.EntityType.WHITHER_SKULL_DANGEROUS = 91;
Native.EntityType.WOLF = 14;
Native.EntityType.ZOMBIE = 32;
Native.EntityType.ZOMBIE_HORSE = 27;
Native.EntityType.ZOMBIE_VILLAGER = 44;
Native.EntityType.ZOMBIE_VILLAGE_V2 = 116;
Native.MobRenderType = {};
Native.MobRenderType.arrow = 25;
Native.MobRenderType.bat = 10;
Native.MobRenderType.blaze = 18;
Native.MobRenderType.boat = 35;
Native.MobRenderType.camera = 48;
Native.MobRenderType.chicken = 5;
Native.MobRenderType.cow = 6;
Native.MobRenderType.creeper = 22;
Native.MobRenderType.egg = 28;
Native.MobRenderType.enderman = 24;
Native.MobRenderType.expPotion = 45;
Native.MobRenderType.experienceOrb = 40;
Native.MobRenderType.fallingTile = 33;
Native.MobRenderType.fireball = 37;
Native.MobRenderType.fishHook = 26;
Native.MobRenderType.ghast = 17;
Native.MobRenderType.human = 3;
Native.MobRenderType.ironGolem = 42;
Native.MobRenderType.item = 4;
Native.MobRenderType.lavaSlime = 16;
Native.MobRenderType.lightningBolt = 41;
Native.MobRenderType.map = 50;
Native.MobRenderType.minecart = 34;
Native.MobRenderType.mushroomCow = 7;
Native.MobRenderType.ocelot = 43;
Native.MobRenderType.painting = 32;
Native.MobRenderType.pig = 8;
Native.MobRenderType.player = 27;
Native.MobRenderType.rabbit = 46;
Native.MobRenderType.sheep = 9;
Native.MobRenderType.silverfish = 21;
Native.MobRenderType.skeleton = 19;
Native.MobRenderType.slime = 23;
Native.MobRenderType.smallFireball = 38;
Native.MobRenderType.snowGolem = 44;
Native.MobRenderType.snowball = 29;
Native.MobRenderType.spider = 20;
Native.MobRenderType.squid = 36;
Native.MobRenderType.thrownPotion = 31;
Native.MobRenderType.tnt = 2;
Native.MobRenderType.unknownItem = 30;
Native.MobRenderType.villager = 12;
Native.MobRenderType.villagerZombie = 39;
Native.MobRenderType.witch = 47;
Native.MobRenderType.wolf = 11;
Native.MobRenderType.zombie = 14;
Native.MobRenderType.zombiePigman = 15;
Native.PotionEffect = {};
Native.PotionEffect.absorption = 22;
Native.PotionEffect.bad_omen = 28;
Native.PotionEffect.blindness = 15;
Native.PotionEffect.conduit_power = 26;
Native.PotionEffect.confusion = 9;
Native.PotionEffect.damageBoost = 5;
Native.PotionEffect.damageResistance = 11;
Native.PotionEffect.digSlowdown = 4;
Native.PotionEffect.digSpeed = 3;
Native.PotionEffect.fatal_poison = 25;
Native.PotionEffect.fireResistance = 12;
Native.PotionEffect.harm = 7;
Native.PotionEffect.heal = 6;
Native.PotionEffect.healthBoost = 21;
Native.PotionEffect.hunger = 17;
Native.PotionEffect.invisibility = 14;
Native.PotionEffect.jump = 8;
Native.PotionEffect.levitation = 24;
Native.PotionEffect.movementSlowdown = 2;
Native.PotionEffect.movementSpeed = 1;
Native.PotionEffect.nightVision = 16;
Native.PotionEffect.poison = 19;
Native.PotionEffect.regeneration = 10;
Native.PotionEffect.saturation = 23;
Native.PotionEffect.slow_falling = 27;
Native.PotionEffect.village_hero = 29;
Native.PotionEffect.waterBreathing = 13;
Native.PotionEffect.weakness = 18;
Native.PotionEffect.wither = 20;
Native.Dimension = {};
Native.Dimension.END = 2;
Native.Dimension.NETHER = 1;
Native.Dimension.NORMAL = 0;
Native.ItemAnimation = {};
Native.ItemAnimation.bow = 4;
Native.ItemAnimation.normal = 0;
Native.BlockSide = {};
Native.BlockSide.DOWN = 0;
Native.BlockSide.EAST = 5;
Native.BlockSide.NORTH = 2;
Native.BlockSide.SOUTH = 3;
Native.BlockSide.UP = 1;
Native.BlockSide.WEST = 4;
Native.Enchantment = {};
Native.Enchantment.AQUA_AFFINITY = 7;
Native.Enchantment.BANE_OF_ARTHROPODS = 11;
Native.Enchantment.BINDING_CURSE = 27;
Native.Enchantment.BLAST_PROTECTION = 3;
Native.Enchantment.CHANNELING = 32;
Native.Enchantment.DEPTH_STRIDER = 8;
Native.Enchantment.EFFICIENCY = 15;
Native.Enchantment.FEATHER_FALLING = 2;
Native.Enchantment.FIRE_ASPECT = 13;
Native.Enchantment.FIRE_PROTECTION = 1;
Native.Enchantment.FLAME = 21;
Native.Enchantment.FORTUNE = 18;
Native.Enchantment.FROST_WALKER = 25;
Native.Enchantment.IMPALING = 29;
Native.Enchantment.INFINITY = 22;
Native.Enchantment.KNOCKBACK = 12;
Native.Enchantment.LOOTING = 14;
Native.Enchantment.LOYALTY = 31;
Native.Enchantment.LUCK_OF_THE_SEA = 23;
Native.Enchantment.LURE = 24;
Native.Enchantment.MENDING = 26;
Native.Enchantment.POWER = 19;
Native.Enchantment.PROJECTILE_PROTECTION = 4;
Native.Enchantment.PROTECTION = 0;
Native.Enchantment.PUNCH = 20;
Native.Enchantment.RESPIRATION = 6;
Native.Enchantment.RIPTIDE = 30;
Native.Enchantment.SHARPNESS = 9;
Native.Enchantment.SILK_TOUCH = 16;
Native.Enchantment.SMITE = 10;
Native.Enchantment.THORNS = 5;
Native.Enchantment.UNBREAKING = 17;
Native.Enchantment.VANISHING_CURSE = 28;
Native.EnchantType = {};
Native.EnchantType.all = 16383;
Native.EnchantType.axe = 512;
Native.EnchantType.book = 16383;
Native.EnchantType.boots = 4;
Native.EnchantType.bow = 32;
Native.EnchantType.chestplate = 8;
Native.EnchantType.fishingRod = 4096;
Native.EnchantType.flintAndSteel = 256;
Native.EnchantType.helmet = 1;
Native.EnchantType.hoe = 64;
Native.EnchantType.leggings = 2;
Native.EnchantType.pickaxe = 1024;
Native.EnchantType.shears = 128;
Native.EnchantType.shovel = 2048;
Native.EnchantType.weapon = 16;
Native.BlockRenderLayer = {};
Native.BlockRenderLayer.alpha = 4099;
Native.BlockRenderLayer.alpha_seasons = 5;
Native.BlockRenderLayer.alpha_single_side = 4;
Native.BlockRenderLayer.blend = 6;
Native.BlockRenderLayer.doubleside = 2;
Native.BlockRenderLayer.far = 9;
Native.BlockRenderLayer.opaque = 0;
Native.BlockRenderLayer.opaque_seasons = 1;
Native.BlockRenderLayer.seasons_far = 10;
Native.BlockRenderLayer.seasons_far_alpha = 11;
Native.BlockRenderLayer.water = 7;
Native.GameMode = {};
Native.GameMode.ADVENTURE = 2;
Native.GameMode.CREATIVE = 1;
Native.GameMode.SPECTATOR = 3;
Native.GameMode.SURVIVAL = 0;
Native.GameDifficulty = {};
Native.GameDifficulty.EASY = 1;
Native.GameDifficulty.HARD = 3;
Native.GameDifficulty.NORMAL = 2;
Native.GameDifficulty.PEACEFUL = 0;
Native.PlayerAbility = {};
Native.PlayerAbility.ATTACK_MOBS = "attackmobs";
Native.PlayerAbility.ATTACK_PLAYERS = "attackplayers";
Native.PlayerAbility.BUILD = "build";
Native.PlayerAbility.DOORS_AND_SWITCHES = "doorsandswitches";
Native.PlayerAbility.FLYING = "flying";
Native.PlayerAbility.FLYSPEED = "flySpeed";
Native.PlayerAbility.INSTABUILD = "instabuild";
Native.PlayerAbility.INVULNERABLE = "invulnerable";
Native.PlayerAbility.LIGHTNING = "lightning";
Native.PlayerAbility.MAYFLY = "mayfly";
Native.PlayerAbility.MINE = "mine";
Native.PlayerAbility.MUTED = "mute";
Native.PlayerAbility.NOCLIP = "noclip";
Native.PlayerAbility.OPEN_CONTAINERS = "opencontainers";
Native.PlayerAbility.OPERATOR_COMMANDS = "op";
Native.PlayerAbility.TELEPORT = "teleport";
Native.PlayerAbility.WALKSPEED = "walkSpeed";
Native.PlayerAbility.WORLDBUILDER = "worldbuilder";

function alert(text) {}
function ItemExtraData() {}
function RenderMesh() {}